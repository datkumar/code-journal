---
import { problemDifficulties } from "../utils/data";

interface Props {
  links: string[];
  techniques: string[];
  level: number;
}

type Site = {
  base: string;
  label: string;
};
const questionSites: Site[] = [
  { base: "leetcode", label: "LeetCode" },
  { base: "neetcode", label: "NeetCode" },
  { base: "codingninjas", label: "Coding Ninjas" },
  { base: "interviewbit", label: "InterviewBit" },
  { base: "geeksforgeeks", label: "GFG" },
  { base: "hackerearth", label: "HackerEarth" },
  { base: "atcoder", label: "AtCoder" },
  { base: "codeforces", label: "Codeforces" },
  { base: "codechef", label: "CodeChef" },
  { base: "hackerrank", label: "HackerRank" },
];

function getSiteNameFromProblemLink(problemLink: string) {
  for (const site of questionSites) {
    if (problemLink.includes(site.base)) {
      return site.label;
    }
  }
  return "Link";
}

const { links, techniques, level } = Astro.props;
---

<style>
  .metadata-container {
    margin-block: 10px;
    line-height: 125%;
    font-size: 110%;
  }

  .difficulty-tag {
    background-color: black;
    padding: 8px 10px;
    border-radius: 0.5rem;
    font-weight: bold;
    font-size: 80%;
  }
</style>

<div>
  <div class="metadata-container">
    <strong>Difficulty:&ensp;</strong>

    <span
      class="difficulty-tag"
      style={`color: ${problemDifficulties[level].color}`}
    >
      {problemDifficulties[level].icon}{" "}{problemDifficulties[level].title}
    </span>
  </div>
  <div class="metadata-container">
    <strong>Techniques:&ensp;</strong>
    {
      techniques.map((t) => (
        <>
          <code>{t.toUpperCase()}</code>&ensp;
        </>
      ))
    }
  </div>
  <div class="metadata-container">
    <strong>Links:&ensp;</strong>
    {
      links.map((link) => (
        <>
          <a href={link}>{getSiteNameFromProblemLink(link)}</a> &ensp;
        </>
      ))
    }
  </div>
</div>

<style>
  code {
    color: var(--contentColor);
  }
</style>
