---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { containsSomeTag } from "../../utils/helper-functions";
import { problemDifficulties } from "../../utils/data";

const dsaConcepts = (await getCollection("concepts")).filter(
  (item) =>
    item.data.tags.includes("dsa") && !item.data.tags.includes("algorithm")
);

const algorithms = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("algorithm")
);

const sortSearchAlgos = algorithms.filter(
  (item) =>
    item.data.tags.includes("sorting") ||
    item.data.tags.includes("binary-search")
);
const graphAlgos = algorithms.filter((item) =>
  item.data.tags.includes("graph")
);

const stlEntries = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("stl")
);

const dsaProblems = await getCollection("dsaProblems");

const baseUrl = import.meta.env.BASE_URL;
---

<style>
  ul,
  ol {
    padding: 0;
    margin: 0;
  }

  ul {
    list-style: disc;
  }

  li {
    padding: 0;
    margin: 0;
    padding-bottom: 3px;
    /* padding-left: 0.5rem; */
    /* margin-left: 2rem; */
    margin-left: 0.5rem;
    list-style-position: inside;
  }

  li::marker {
    margin: 0;
    padding: 0;
    margin: 0;
  }
  ul li::marker {
    font-size: 20px;
  }
  ol li::marker {
  }

  .problem-item {
    list-style: none;
  }
</style>

<BaseLayout tabTitle="DSA">
  <h1>DSA</h1>

  <hr />

  <h2>C++ primer</h2>
  <ul>
    {
      stlEntries.map((entry) => (
        <li>
          <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
        </li>
      ))
    }
    <li><a rel="stylesheet" href={`${baseUrl}/cpp`}>More C++</a></li>
  </ul>

  <hr />

  <h2>Theory and prerequisites</h2>

  <h3>Concepts</h3>
  <ul>
    {
      dsaConcepts.map((entry) => (
        <li>
          <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
        </li>
      ))
    }
  </ul>

  <h3>Sorting and Searching algorithms</h3>
  <ul>
    {
      sortSearchAlgos.map((entry) => (
        <li>
          <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
        </li>
      ))
    }
  </ul>

  <h3>Graph algorithms</h3>
  <ul>
    {
      graphAlgos.map((entry) => (
        <li>
          <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
        </li>
      ))
    }
  </ul>

  <hr />

  <!-- PROBLEMS: -->

  <h2>Arrays & Strings</h2>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) => containsSomeTag(entry.data.ds, ["array", "string"]))
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}&ensp;
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>

  <h2>Stack, Queues, Heaps</h2>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) =>
          containsSomeTag(entry.data.ds, ["stack", "queue", "heap"])
        )
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}&ensp;
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>

  <h2>Linked Lists</h2>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) => containsSomeTag(entry.data.ds, ["list"]))
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}&ensp;
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>
</BaseLayout>
