---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { containsSomeTag } from "../../utils/helper-functions";
import { problemDifficulties } from "../../utils/data";

const dsaConcepts = (await getCollection("concepts")).filter(
  (item) =>
    item.data.tags.includes("dsa") && !item.data.tags.includes("algorithm")
);

const algorithms = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("algorithm")
);

const sortSearchAlgos = algorithms.filter(
  (item) =>
    item.data.tags.includes("sorting") ||
    item.data.tags.includes("binary-search")
);
const graphAlgos = algorithms.filter((item) =>
  item.data.tags.includes("graph")
);

const stlEntries = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("stl")
);

const dsaProblems = await getCollection("dsaProblems");

const baseUrl = import.meta.env.BASE_URL;
---

<style>
  ul {
    padding-left: 0;
  }

  .problem-item {
    list-style: none;
    list-style-position: outside;
    padding-block: 5px;
  }
</style>

<BaseLayout tabTitle="DSA">
  <h1>DSA</h1>

  <details>
    <summary><strong>C++ STL</strong></summary>
    <ol>
      {
        stlEntries.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
      <li><a rel="stylesheet" href={`${baseUrl}/cpp`}> Other C++ </a></li>
    </ol>
  </details>

  <details>
    <summary><strong>Theory</strong></summary>
    <ol>
      {
        dsaConcepts.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ol>
  </details>

  <h2>Algorithms</h2>
  <details>
    <summary><strong>Sorting algorithms & Binary Search</strong></summary>
    <ol>
      {
        sortSearchAlgos.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ol>
  </details>
  <details>
    <summary><strong>Graph algorithms</strong></summary>
    <ol>
      {
        graphAlgos.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ol>
  </details>

  <!-- PROBLEMS: -->

  <h2>Arrays & Strings</h2>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) => containsSomeTag(entry.data.ds, ["array", "string"]))
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}{" "}
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>

  <h2>Stack, Queues, Heaps</h2>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) =>
          containsSomeTag(entry.data.ds, ["stack", "queue", "heap"])
        )
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}{" "}
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>

  <h3>Linked Lists</h3>
  <ul>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) => containsSomeTag(entry.data.ds, ["list"]))
        .map((entry) => {
          return (
            <li class="problem-item">
              {problemDifficulties[entry.data.level].icon}{" "}
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ul>
</BaseLayout>
