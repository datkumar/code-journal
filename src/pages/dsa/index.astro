---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { containsSomeTag } from "../../utils/helper-functions";

const dsaConcepts = (await getCollection("concepts")).filter(
  (item) =>
    item.data.tags.includes("dsa") && !item.data.tags.includes("algorithm")
);

const algorithms = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("algorithm")
);

const sortSearchAlgos = algorithms.filter(
  (item) =>
    item.data.tags.includes("sorting") ||
    item.data.tags.includes("binary-search")
);
const graphAlgos = algorithms.filter((item) =>
  item.data.tags.includes("graph")
);

const stlEntries = (await getCollection("concepts")).filter((item) =>
  item.data.tags.includes("stl")
);

const dsaProblems = await getCollection("dsaProblems");

const baseUrl = import.meta.env.BASE_URL;
---

<BaseLayout tabTitle="DSA">
  <h2>DSA</h2>

  <details>
    <summary><strong>C++ STL</strong></summary>

    <ul>
      {
        stlEntries.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
      <li><a rel="stylesheet" href={`${baseUrl}/cpp`}> Other C++ </a></li>
    </ul>
  </details>

  <details>
    <summary><strong>Theory</strong></summary>
    <ul>
      {
        dsaConcepts.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ul>
  </details>

  <h3>Algorithms</h3>
  <details>
    <summary><strong>Sorting algorithms & Binary Search</strong></summary>
    <ol>
      {
        sortSearchAlgos.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ol>
  </details>
  <details>
    <summary><strong>Graph algorithms</strong></summary>
    <ol>
      {
        graphAlgos.map((entry) => (
          <li>
            <a href={`${baseUrl}/dsa/${entry.slug}`}>{entry.data.title}</a>
          </li>
        ))
      }
    </ol>
  </details>

  <h3>Arrays & Strings</h3>
  <ol>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) => containsSomeTag(entry.data.ds, ["array", "string"]))
        .map((entry) => {
          return (
            <li>
              {["游댯", "游릭", "游리", "游댮", "游릮"][entry.data.level]}
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ol>

  <h3>Stack, Queues, Heaps</h3>
  <ol>
    {
      dsaProblems
        .sort((a, b) => a.data.level - b.data.level)
        .filter((entry) =>
          containsSomeTag(entry.data.ds, ["stack", "queue", "heap"])
        )
        .map((entry) => {
          return (
            <li>
              {["游댯", "游릭", "游리", "游댮", "游릮"][entry.data.level]}
              <a href={`${baseUrl}/dsa/${entry.slug}/`}>{entry.data.title}</a>
            </li>
          );
        })
    }
  </ol>
</BaseLayout>
