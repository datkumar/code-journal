---
// Global CSS styles
import "../styles/global.css";

import Header from "./Header.astro";
import Footer from "./Footer.astro";

interface Props {
  tabTitle: string;
}
const { tabTitle } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Code Journal" />
    <meta name="viewport" content="width=device-width" />
    <!-- Favicon -->
    <link
      rel="icon"
      type="image/svg+xml"
      href=`${import.meta.env.BASE_URL}/icons/code.svg`
    />
    <meta name="generator" content={Astro.generator} />
    <title>{tabTitle}</title>
  </head>

  <body class="markdown-body">
    <Header />

    <main>
      <slot>
        <!-- Actual content unique to the page (with fallback content) -->
        This page is empty
      </slot>
    </main>

    <Footer />

    <!-- Theme switch script -->
    <script src="../utils/theme-script.ts"></script>

    <!-- MathJax for Math expressions -->
    <script
      is:inline
      id="MathJax-script"
      async
      src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
    ></script>

    <!-- Mermaid for generating diagrams from code -->
    <script>
      async function renderDiagrams(graphs: HTMLCollectionOf<Element>) {
        const { default: mermaid } = await import("mermaid");
        mermaid.initialize({
          startOnLoad: false,
          fontFamily: "monospace",
          // Only "base" theme can be modified
          theme: "base",
          themeVariables: {
            lineColor: "#5f00ed",
            primaryColor: "#e4ddf0",
          },
        });

        for (const graph of graphs) {
          const content = graph.getAttribute("data-content");
          if (!content) {
            continue;
          }
          let svg = document.createElement("svg");
          const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000));
          graph.appendChild(svg);
          mermaid.render(id, content).then((result: any) => {
            graph.innerHTML = result.svg;
          });
        }
      }

      const graphs = document.getElementsByClassName("mermaid");
      if (document.getElementsByClassName("mermaid").length > 0) {
        renderDiagrams(graphs);
      }
    </script>
  </body>
</html>
